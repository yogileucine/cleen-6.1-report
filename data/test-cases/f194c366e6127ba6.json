{"uid":"f194c366e6127ba6","name":"Validate the cleaning agent residue verification final summary page","fullName":"tests.scenarios.multi_production_protocol.protocol.test_multi_prodcution_protocol.TestMultiProductionProtocol#test_validate_final_summary_cleaning_agent_residue_verification_details","historyId":"ee3d2f992196277362d64faf120a90c9","time":{"start":1733076766915,"stop":1733076790820,"duration":23905},"description":"This test case tests API to Create Protocol for cleaning agent residue verification and validate the final summary details","descriptionHtml":"<p>This test case tests API to Create Protocol for cleaning agent residue verification and validate the final summary details</p>\n","status":"broken","statusMessage":"KeyError: 'columns'","statusTrace":"self = <test_multi_prodcution_protocol.TestMultiProductionProtocol object at 0x00000259D10EC910>\n\n    @allure.title(\"Validate the cleaning agent residue verification final summary page\")\n    @allure.description(\"This test case tests API to Create Protocol for cleaning agent residue verification and \"\n                        \"validate the final summary details\")\n    @allure.link(\"https://app.clickup.com/t/86cumczjd\")\n    @pytest.mark.validate_final_summary_cleaning_agent_residue_verification_details\n    def test_validate_final_summary_cleaning_agent_residue_verification_details(self):\n        data = self.test_select_cleaning_agent_direct_indirect_based_on_policy_multi_production_protocol()\n        no_of_runs_payload = number_of_runs_sample_limits()\n    \n        data.update({\"no_of_runs_payload\": no_of_runs_payload})\n    \n        self.protocol_common_method.update_protocol_residue_verification_sample_limits_run(data)\n    \n        final_summary = self.protocol_common_method.get_active_final_summary_details(data)[\"response\"]\n    \n        equipments_id = self.protocol_common_method.get_protocol_equipments_ids(data)\n        # for i in equipments_id:\n        #     data.update({\"equipment\": i[\"equipment_id\"], \"external_id\": i[\"external_id\"],\n        #                  \"columns\": self.EXCELS_COLUMNS, \"sample_type\": \"Cleaning Agent\"})\n        #     sample_limits = json.loads(final_summary)[\"result\"]\n        #     data.update({\"sample_profile\": sample_limits})\n        #     self.protocol_cleaning_agent.compare_samples_swab_rinse_surface_area_cleaning_agent_summary(data)\n        eq_index = 0\n        for i in equipments_id:\n            data.update({\"equipment\": i[\"equipment_id\"], \"external_id\": i[\"external_id\"], \"type\": \"Detergent\"})\n            sample_limits = json.loads(final_summary)[\"result\"]\n            data.update({\"sample_profile\": sample_limits, \"eq_length\": eq_index})\n            eq_index += 1\n>           self.protocol_cleaning_agent.compare_samples_swab_rinse_surface_area_summary(data)\n\ntests\\scenarios\\multi_production_protocol\\protocol\\test_multi_prodcution_protocol.py:3425: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\ndata = {'add_new_protocol_payload': {'authorId': 6, 'description': 'Automation Protocol', 'externalId': 'Protocol-J66Y', 'nam...2a5-2095-4ca4-8cd3-4c1ff341df79': {'cleaningAgents': {'153': {...}, '154': {...}}, 'externalId': 'CPN-3'}}}, ...}, ...}\n\n    @staticmethod\n    def compare_samples_swab_rinse_surface_area_summary(data):\n        sheet_name = data[\"external_id\"] + \"_samples\"\n>       sample_area = Excel.read_excel_columns_name_row_value(const.get_master_data(), sheet_name, data[\"columns\"],\n                                                              \"Cleaning Agent\")\nE       KeyError: 'columns'\n\ntests\\unit\\protocols\\protocol_cleaning_agent_criteria.py:304: KeyError","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"login","time":{"start":1733076765883,"stop":1733076766580,"duration":697},"status":"passed","steps":[],"attachments":[],"parameters":[],"attachmentsCount":0,"shouldDisplayMessage":false,"stepsCount":0,"hasContent":false,"attachmentStep":false},{"name":"get_facility","time":{"start":1733076766580,"stop":1733076766911,"duration":331},"status":"passed","steps":[],"attachments":[],"parameters":[],"attachmentsCount":0,"shouldDisplayMessage":false,"stepsCount":0,"hasContent":false,"attachmentStep":false}],"afterStages":[],"labels":[{"name":"tag","value":"validate_final_summary_cleaning_agent_residue_verification_details"},{"name":"tag","value":"multi_production_protocol"},{"name":"tag","value":"scenario"},{"name":"parentSuite","value":"tests.scenarios.multi_production_protocol.protocol"},{"name":"suite","value":"test_multi_prodcution_protocol"},{"name":"subSuite","value":"TestMultiProductionProtocol"},{"name":"host","value":"DESKTOP-ESU2KLG"},{"name":"thread","value":"3708-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.scenarios.multi_production_protocol.protocol.test_multi_prodcution_protocol"},{"name":"resultFormat","value":"allure2"}],"parameters":[],"links":[{"name":"https://app.clickup.com/t/86cumczjd","url":"https://app.clickup.com/t/86cumczjd","type":"link"}],"hidden":true,"retry":true,"extra":{"categories":[],"tags":["multi_production_protocol","scenario","validate_final_summary_cleaning_agent_residue_verification_details"]},"source":"f194c366e6127ba6.json","parameterValues":[]}