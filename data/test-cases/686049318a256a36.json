{"uid":"686049318a256a36","name":"Test Cleaning agent SAL","fullName":"tests.scenarios.test_cleaning_agent_limit.TestCleaningAgentLimit#test_validate_cleaning_agent_sal_upper_limit_mg_sqm","historyId":"9de6f2765007acce81566241aca16f6a","time":{"start":1733077790427,"stop":1733077791211,"duration":784},"description":"This test case test the cleaning agent sal from list of equipment when upper limit for all criteria (toxicity,default ARL) criteria is selected and sal unit is mg & default surface area is sqm","descriptionHtml":"<p>This test case test the cleaning agent sal from list of equipment when upper limit for all criteria (toxicity,default ARL) criteria is selected and sal unit is mg &amp; default surface area is sqm</p>\n","status":"failed","statusMessage":"AssertionError: {\"error\":{\"errName\":\"GeneralTaskError\",\"where\":{\"domain\":\"FacilityCleaningEvaluation\",\"action\":\"Start\"},\"name\":\"No Worst Production Selection Criteria\"}}","statusTrace":"self = <test_cleaning_agent_limit.TestCleaningAgentLimit object at 0x00000218E10D1310>\n\n    @allure.title(\"Test Cleaning agent SAL\")\n    @allure.description(\"This test case test the cleaning agent sal from list of equipment when upper limit \"\n                        \"for all criteria (toxicity,default ARL) criteria is selected \"\n                        \"and sal unit is mg & default surface area is sqm\")\n    @allure.link(\"https://app.clickup.com/t/86ctwpdje\")\n    @pytest.mark.cleaning_agent_sal\n    @pytest.mark.validate_cleaning_agent_sal_upper_limit_mg_sqm\n    def test_validate_cleaning_agent_sal_upper_limit_mg_sqm(self):\n        upper_limit = Excel.read_excel_col_name_row_number(const.get_master_data(), \"config\",\n                                                           \"upper_limit\", 2)\n        policy_data = {\"useToxicity\": True, \"useARL\": True, \"useResidueLimit\": True, \"residueLimit\": upper_limit,\n                       \"salMassUnit\": \"mg\", \"residue_unit\": \"mg/sqm\"}\n        data = {}\n        get_policy = json.loads(self.update_cleaning_agent.test_get_cleaning_agent_cleaning_limit_policy())\n        get_policy = get_policy[\"policy\"]\n        update_policy = create_cleaning_limit_policy_cleaning_agent_payload(get_policy, policy_data)\n        data.update({\"update_policy_payload\": update_policy})\n        data.update(const.DEFAULT_SURFACE_AREA_SQM)\n        self.update_default_unit.test_update_default_unit(data)\n        if get_policy != update_policy[\"data\"]:\n            self.update_cleaning_agent.test_update_cleaning_agent_policy(data)\n>           self.change_assessment.test_start_cleaning_assessment(scenario=True)\n\ntests\\scenarios\\test_cleaning_agent_limit.py:498: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\ntests\\unit\\change_assessment\\test_cleaning_assessment.py:32: in test_start_cleaning_assessment\n    status_200(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nresponse = <Response [409]>\n\n    def status_200(response):\n>       assert response.status_code == 200, response.text\nE       AssertionError: {\"error\":{\"errName\":\"GeneralTaskError\",\"where\":{\"domain\":\"FacilityCleaningEvaluation\",\"action\":\"Start\"},\"name\":\"No Worst Production Selection Criteria\"}}\n\nutil\\validate_response.py:3: AssertionError","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"login","time":{"start":1733077782073,"stop":1733077782838,"duration":765},"status":"passed","steps":[],"attachments":[],"parameters":[],"attachmentsCount":0,"shouldDisplayMessage":false,"stepsCount":0,"hasContent":false,"attachmentStep":false},{"name":"get_facility","time":{"start":1733077782838,"stop":1733077783053,"duration":215},"status":"passed","steps":[],"attachments":[],"parameters":[],"attachmentsCount":0,"shouldDisplayMessage":false,"stepsCount":0,"hasContent":false,"attachmentStep":false},{"name":"This method will setup the cleaning agent limit policy","time":{"start":1733077783053,"stop":1733077784947,"duration":1894},"status":"passed","steps":[],"attachments":[],"parameters":[],"attachmentsCount":0,"shouldDisplayMessage":false,"stepsCount":0,"hasContent":false,"attachmentStep":false}],"afterStages":[],"labels":[{"name":"tag","value":"validate_cleaning_agent_sal_upper_limit_mg_sqm"},{"name":"tag","value":"cleaning_agent_sal"},{"name":"tag","value":"cleaning_agent_limits"},{"name":"parentSuite","value":"tests.scenarios"},{"name":"suite","value":"test_cleaning_agent_limit"},{"name":"subSuite","value":"TestCleaningAgentLimit"},{"name":"host","value":"DESKTOP-ESU2KLG"},{"name":"thread","value":"18660-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.scenarios.test_cleaning_agent_limit"},{"name":"resultFormat","value":"allure2"}],"parameters":[],"links":[{"name":"https://app.clickup.com/t/86ctwpdje","url":"https://app.clickup.com/t/86ctwpdje","type":"link"}],"hidden":true,"retry":true,"extra":{"categories":[],"tags":["cleaning_agent_sal","cleaning_agent_limits","validate_cleaning_agent_sal_upper_limit_mg_sqm"]},"source":"686049318a256a36.json","parameterValues":[]}