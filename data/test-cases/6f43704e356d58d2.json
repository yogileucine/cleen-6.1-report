{"uid":"6f43704e356d58d2","name":"Validate the endotoxin residue verification final summary page when unit is SQCM and L","fullName":"tests.scenarios.multi_production_protocol.protocol.test_multi_prodcution_protocol.TestMultiProductionProtocol#test_validate_final_summary_endotoxin_residue_verification_details_sqcm_l","historyId":"9b5506a6c0591aa01837a27cf5246a0d","time":{"start":1733074680236,"stop":1733074696202,"duration":15966},"description":"This test case tests API to Create Protocol for endotoxin residue verification and validate the final summary details when surface unit is SQCM and volume unit is L","descriptionHtml":"<p>This test case tests API to Create Protocol for endotoxin residue verification and validate the final summary details when surface unit is SQCM and volume unit is L</p>\n","status":"failed","statusMessage":"AssertionError: Sampling area from API not matching: 0.0065, with surface area: 0.006500000000000001 for sample id EQM-2/EN-3","statusTrace":"self = <test_multi_prodcution_protocol.TestMultiProductionProtocol object at 0x000001AD5599EA10>\n\n    @allure.title(\"Validate the endotoxin residue verification final summary page when unit is SQCM and L\")\n    @allure.description(\"This test case tests API to Create Protocol for endotoxin residue verification and \"\n                        \"validate the final summary details when surface unit is SQCM and volume unit is L\")\n    @allure.link(\"https://app.clickup.com/t/86cwdb8vp\")\n    @pytest.mark.validate_final_summary_endotoxin_residue_verification_details_sqcm_l\n    def test_validate_final_summary_endotoxin_residue_verification_details_sqcm_l(self):\n        data = self.test_create_protocol_endotoxin_residue_verification_based_on_policy_l()\n        no_of_runs_payload = number_of_runs_sample_limits()\n    \n        data.update({\"no_of_runs_payload\": no_of_runs_payload})\n    \n        self.protocol_common_method.update_protocol_residue_verification_sample_limits_run(data)\n    \n        final_summary = self.protocol_common_method.get_active_final_summary_details(data)[\"response\"]\n    \n        equipments_id = self.protocol_common_method.get_protocol_equipments_ids(data)\n        for i in equipments_id:\n            data.update({\"equipment\": i[\"equipment_id\"], \"external_id\": i[\"external_id\"],\n                         \"columns\": self.EXCELS_COLUMNS, \"sample_type\": \"Endotoxin\"})\n            sample_limits = json.loads(final_summary)[\"result\"]\n            data.update({\"sample_profile\": sample_limits})\n            self.protocol_endotoxin.compare_samples_swab_rinse_sample_limits_endotoxin_summary(data)\n        eq_index = 0\n        for i in equipments_id:\n            data.update({\"equipment\": i[\"equipment_id\"], \"external_id\": i[\"external_id\"], \"type\": \"Endotoxin\"})\n            sample_limits = json.loads(final_summary)[\"result\"]\n            data.update({\"sample_profile\": sample_limits, \"eq_length\": eq_index})\n            eq_index += 1\n>           self.protocol_endotoxin.compare_samples_swab_rinse_surface_area_endotoxin_summary(data)\n\ntests\\scenarios\\multi_production_protocol\\protocol\\test_multi_prodcution_protocol.py:3613: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\ndata = {'add_new_protocol_payload': {'authorId': 6, 'description': 'Automation Protocol', 'externalId': 'Protocol-ANWV', 'nam...: {'additionalInfo': '', 'enabled': True, 'perUnitVolume': {'unit': 'L', 'value': 0.001}, 'rinseLimit': 11}, ...}, ...}\n\n    @staticmethod\n    def compare_samples_swab_rinse_surface_area_endotoxin_summary(data):\n        if data[\"external_id\"] == \"EQM-16\":\n            sheet_name = \"EQM-17\" + \"_samples\"\n        elif data[\"external_id\"] == \"EQM-17\":\n            sheet_name = \"EQM-16\" + \"_samples\"\n        else:\n            sheet_name = data[\"external_id\"] + \"_samples\"\n        sample_area = Excel.read_excel_columns_name_row_value(const.get_master_data(), sheet_name, data[\"columns\"],\n                                                              \"Endotoxin\")\n    \n        if data.get(\"vol_unit\") is not None and data.get(\"vol_unit\").get(\"default_unit\") == \"L\":\n            rinse_list = [item * 0.001 for item in sample_area[\"rinse_volume\"] if item != '#VALUE!']\n        else:\n            rinse_list = [item for item in sample_area[\"rinse_volume\"] if item != '#VALUE!']\n    \n        if data.get(\"surface_unit\") is not None and data.get(\"surface_unit\").get(\"default_unit\") == \"sqm\":\n            swab_list = [item * 0.0001 for item in sample_area[\"Sampling area(sqcm)\"] if item != '#VALUE!']\n        elif data.get(\"surface_unit\") is not None and data.get(\"surface_unit\").get(\n                \"default_unit\") == \"sqin\":\n            swab_list = [item * 0.155 for item in sample_area[\"Sampling area(sqcm)\"] if item != '#VALUE!']\n        else:\n            swab_list = [item for item in sample_area[\"Sampling area(sqcm)\"] if item != '#VALUE!']\n        # rinse_list = [item for item in sample_area[\"rinse_volume\"] if item != '#VALUE']\n        # swab_list = [item for item in sample_area[\"Sampling area(sqcm)\"] if item != '#VALUE']\n        sample_ids = [item for item in sample_area[\"sample id\"] if item != '#VALUE']\n        rinse_vol_mapping = dict(zip(sample_ids, rinse_list))\n        swab_area_mapping = dict(zip(sample_ids, swab_list))\n        for profile in data['sample_profile']['samplingProfiles'][data[\"eq_length\"]]['samplingProfile'].values():\n            for sample in profile['samples'].values():\n                sample_id = sample.get('externalId')\n                if sample.get('type') == data[\"type\"]:\n                    if sample.get('externalId') in sample_area[\"sample id\"]:\n                        surface_area = sample.get('surfaceArea')\n                        rinse_volume = sample.get('rinseVolume')\n                        if surface_area is not None:\n                            assert round(surface_area, 3) == round(swab_area_mapping[sample_id], 3), \\\n                                (f\"Sampling area from API not matching: {surface_area}, with surface area: \"\n                                 f\"{swab_area_mapping[sample_id]} for sample id {sample_id}\")\n                        if rinse_volume is not None:\n>                           assert round(rinse_volume, 3) == round(rinse_vol_mapping[sample_id], 3), \\\n                                (f\"Sampling area from API not matching: {rinse_volume}, with surface area: \"\n                                 f\"{rinse_vol_mapping[sample_id]} for sample id {sample_id}\")\nE                           AssertionError: Sampling area from API not matching: 0.0065, with surface area: 0.006500000000000001 for sample id EQM-2/EN-3\n\ntests\\unit\\protocols\\protocol_endotoxin_residue_verification.py:300: AssertionError","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"login","time":{"start":1733074679658,"stop":1733074679987,"duration":329},"status":"passed","steps":[],"attachments":[],"parameters":[],"hasContent":false,"stepsCount":0,"attachmentStep":false,"shouldDisplayMessage":false,"attachmentsCount":0},{"name":"get_facility","time":{"start":1733074679987,"stop":1733074680236,"duration":249},"status":"passed","steps":[],"attachments":[],"parameters":[],"hasContent":false,"stepsCount":0,"attachmentStep":false,"shouldDisplayMessage":false,"attachmentsCount":0}],"afterStages":[],"labels":[{"name":"tag","value":"validate_final_summary_endotoxin_residue_verification_details_sqcm_l"},{"name":"tag","value":"multi_production_protocol"},{"name":"tag","value":"scenario"},{"name":"parentSuite","value":"tests.scenarios.multi_production_protocol.protocol"},{"name":"suite","value":"test_multi_prodcution_protocol"},{"name":"subSuite","value":"TestMultiProductionProtocol"},{"name":"host","value":"DESKTOP-ESU2KLG"},{"name":"thread","value":"13520-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.scenarios.multi_production_protocol.protocol.test_multi_prodcution_protocol"},{"name":"resultFormat","value":"allure2"}],"parameters":[],"links":[{"name":"https://app.clickup.com/t/86cwdb8vp","url":"https://app.clickup.com/t/86cwdb8vp","type":"link"}],"hidden":true,"retry":true,"extra":{"categories":[],"tags":["multi_production_protocol","scenario","validate_final_summary_endotoxin_residue_verification_details_sqcm_l"]},"source":"6f43704e356d58d2.json","parameterValues":[]}