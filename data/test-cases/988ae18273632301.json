{"uid":"988ae18273632301","name":"Validate the audit logs details for when update the cleaning detail of inspection","fullName":"tests.scenarios.audit_logs.test_audit_logs_scenarios.TestAuditLogsScenarios#test_validate_updated_cleaning_detail_inspection_audit_logs_details","historyId":"bcbd19f34058d09d2ea011ea3e9fe83f","time":{"start":1733072387595,"stop":1733072431518,"duration":43923},"description":"This test case test API to validate the audit logs details for when update the cleaning detailof inspection","descriptionHtml":"<p>This test case test API to validate the audit logs details for when update the cleaning detailof inspection</p>\n","status":"failed","statusMessage":"AssertionError: Expected '01-12-2024 22:30:31' for new Cleaning Details, Completed At, but got 01-12-2024 22:30:30\nassert '01-12-2024 22:30:30' == '01-12-2024 22:30:31'\n  - 01-12-2024 22:30:31\n  ?                   ^\n  + 01-12-2024 22:30:30\n  ?                   ^","statusTrace":"self = <test_audit_logs_scenarios.TestAuditLogsScenarios object at 0x000001931EDE3B50>\n\n    @allure.title(\"Validate the audit logs details for when update the cleaning detail of inspection\")\n    @allure.description(\"This test case test API to validate the audit logs details for when update the cleaning detail\"\n                        \"of inspection\")\n    @allure.link(\"https://app.clickup.com/t/86cw1quw7\")\n    @pytest.mark.validate_updated_cleaning_detail_inspection_audit_logs_details\n    def test_validate_updated_cleaning_detail_inspection_audit_logs_details(self):\n        inspection = self.inspection_multi_production_protocol.test_update_cleaning_details_inspection(\n            self.inspection_multi_production_protocol.inspection_setup())\n        time_stamp = datetime.utcnow().isoformat()\n    \n        payload_details = inspection[\"update_inspection_payload\"]\n    \n        formatted_date = self.validate_audit_logs.formate_date_iso(payload_details[\"cleaningStartedAt\"])\n    \n        expected_audit_log_msg = (f\"{inspection['inspection_external_id']}\\nStudy: {inspection['study_name']} \"\n                                  f\"(ID: {inspection['study_external_id']})\\nEquipment: \"\n                                  f\"Tablet deduster & metal detector (ID: EQM-19)\")\n    \n        audit_logs_details = self.validate_audit_logs.audit_logs_details(policy_name=\"OnDemandInspection\",\n                                                                         action=const.LOG_ACTION_MODIFY)\n    \n        for index, result in enumerate(audit_logs_details.get(\"audit_logs\", {}).get(\"result\", [])):\n            response_time_stamp = result.get(\"timestamp\")\n            action_exists = result.get(\"action\") is not None\n            domain_is_additional_policy = result.get(\"domain\") == \"OnDemandInspection\"\n            audit_diff = result.get(\"diff\", {})\n    \n            if audit_diff.get(\"ID\", {}).get(\"data\", {}).get(\"old\", {}).get(\"value\") == inspection[\n                'inspection_external_id']:\n                if action_exists and domain_is_additional_policy:\n                    self.validate_audit_logs.assert_audit_diff(audit_diff, \"Cleaning Details, Additional Info\", None,\n                                                               payload_details[\"additionalInfo\"])\n                    self.validate_audit_logs.assert_audit_diff(audit_diff, \"Cleaning Details, Cleaned By\", None,\n                                                               \"Admin User (Id: admin)\")\n>                   self.validate_audit_logs.assert_audit_diff(audit_diff, \"Cleaning Details, Completed At\", None,\n                                                               formatted_date)\n\ntests\\scenarios\\audit_logs\\test_audit_logs_scenarios.py:2268: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\naudit_diff = {'Cleaning Details, Additional Info': {'data': {'new': {'value': 'Automation Test'}}, 'type': 'created'}, 'Cleaning De...created'}, 'Cleaning Details, Started At': {'data': {'new': {'value': '01-12-2024 22:30:30'}}, 'type': 'created'}, ...}\nkey = 'Cleaning Details, Completed At', expected_old_value = None, expected_new_value = '01-12-2024 22:30:31'\n\n    @staticmethod\n    def assert_audit_diff(audit_diff, key, expected_old_value, expected_new_value):\n        old_value = audit_diff.get(key, {}).get(\"data\", {}).get(\"old\", {}).get(\"value\")\n        new_value = audit_diff.get(key, {}).get(\"data\", {}).get(\"new\", {}).get(\"value\")\n    \n        assert old_value == expected_old_value, f\"Expected '{expected_old_value}' for old {key}, but got {old_value}\"\n>       assert new_value == expected_new_value, f\"Expected '{expected_new_value}' for new {key}, but got {new_value}\"\nE       AssertionError: Expected '01-12-2024 22:30:31' for new Cleaning Details, Completed At, but got 01-12-2024 22:30:30\nE       assert '01-12-2024 22:30:30' == '01-12-2024 22:30:31'\nE         - 01-12-2024 22:30:31\nE         ?                   ^\nE         + 01-12-2024 22:30:30\nE         ?                   ^\n\ntests\\unit\\audit_logs\\test_audit_logs.py:129: AssertionError","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"login","time":{"start":1733065282628,"stop":1733065282996,"duration":368},"status":"passed","steps":[],"attachments":[],"parameters":[],"attachmentStep":false,"stepsCount":0,"hasContent":false,"attachmentsCount":0,"shouldDisplayMessage":false},{"name":"get_facility","time":{"start":1733065282996,"stop":1733065283154,"duration":158},"status":"passed","steps":[],"attachments":[],"parameters":[],"attachmentStep":false,"stepsCount":0,"hasContent":false,"attachmentsCount":0,"shouldDisplayMessage":false}],"afterStages":[],"labels":[{"name":"tag","value":"validate_updated_cleaning_detail_inspection_audit_logs_details"},{"name":"tag","value":"run(order=-2)"},{"name":"tag","value":"second_to_last"},{"name":"tag","value":"audit_logs_scenarios"},{"name":"tag","value":"scenario"},{"name":"parentSuite","value":"tests.scenarios.audit_logs"},{"name":"suite","value":"test_audit_logs_scenarios"},{"name":"subSuite","value":"TestAuditLogsScenarios"},{"name":"host","value":"DESKTOP-ESU2KLG"},{"name":"thread","value":"1892-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.scenarios.audit_logs.test_audit_logs_scenarios"},{"name":"resultFormat","value":"allure2"}],"parameters":[],"links":[{"name":"https://app.clickup.com/t/86cw1quw7","url":"https://app.clickup.com/t/86cw1quw7","type":"link"}],"hidden":true,"retry":true,"extra":{"categories":[],"tags":["scenario","audit_logs_scenarios","second_to_last","run(order=-2)","validate_updated_cleaning_detail_inspection_audit_logs_details"]},"source":"988ae18273632301.json","parameterValues":[]}