{"uid":"151e9bb0f2b897e7","name":"Validate the audit logs details for update auto selection policy","fullName":"tests.scenarios.audit_logs.test_audit_logs_scenarios.TestAuditLogsScenarios#test_validate_update_auto_selection_policy_audit_logs_details","historyId":"e82ae8df3ef0e1ffacd1ab76038c562b","time":{"start":1733072831933,"stop":1733072832192,"duration":259},"description":"This test case test API to validate the audit logs details for update auto selection policy","descriptionHtml":"<p>This test case test API to validate the audit logs details for update auto selection policy</p>\n","status":"failed","statusMessage":"AssertionError: Expected '2024-12-01 17:07:12.023384', but got '2024-12-01 17:05:34.929000', the difference '0:01:37.094384' is more than the tolerance '0:01:00'\nassert datetime.timedelta(seconds=97, microseconds=94384) <= datetime.timedelta(seconds=60)","statusTrace":"self = <test_audit_logs_scenarios.TestAuditLogsScenarios object at 0x00000176DA5BCD10>\n\n    @allure.title(\"Validate the audit logs details for update auto selection policy\")\n    @allure.description(\"This test case test API to validate the audit logs details for update auto selection policy\")\n    @allure.link(\"https://app.clickup.com/t/86cw0frup\")\n    @pytest.mark.validate_update_auto_selection_policy_audit_logs_details\n    def test_validate_update_auto_selection_policy_audit_logs_details(self):\n        selection_policy = self.sampling_location_assessment.test_update_auto_selection_policies()\n        time_stamp = selection_policy[\"timestamp\"]\n    \n        audit_logs_details = self.validate_audit_logs.audit_logs_details(policy_name=\"SamplingPolicy\",\n                                                                         action=const.LOG_ACTION_ADD)\n    \n        for index, result in enumerate(audit_logs_details.get(\"audit_logs\", {}).get(\"result\", [])):\n            response_time_stamp = result.get(\"timestamp\")\n            action_exists = result.get(\"action\") is not None\n            domain_is_additional_policy = result.get(\"domain\") == \"SamplingPolicy\"\n            audit_diff = result.get(\"diff\", {})\n    \n            if action_exists and domain_is_additional_policy:\n                self.validate_audit_logs.assert_audit_diff(audit_diff, \"Min Locations\", None, \"1\")\n                self.validate_audit_logs.assert_audit_diff(audit_diff, \"Policy\", \"\", const.YES_NO_POLICY)\n>               self.validate_audit_logs.updated_policy_time_stamp(time_stamp, response_time_stamp)\n\ntests\\scenarios\\audit_logs\\test_audit_logs_scenarios.py:1889: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\ntime_stamp = datetime.datetime(2024, 12, 1, 17, 7, 12, 23384), response_time_stamp = datetime.datetime(2024, 12, 1, 17, 5, 34, 929000)\n\n    @staticmethod\n    def updated_policy_time_stamp(time_stamp, response_time_stamp):\n        time_stamp = str(time_stamp)\n        response_time_stamp = datetime.fromisoformat(response_time_stamp.replace(\"Z\", \"+00:00\"))\n        response_time_stamp = response_time_stamp.replace(tzinfo=None)\n        time_stamp = datetime.fromisoformat(time_stamp)\n        # Define the tolerance (for example, 1 minute)\n        tolerance = timedelta(minutes=1)\n    \n        # Calculate the absolute difference between the two timestamps\n        time_difference = abs(response_time_stamp - time_stamp)\n    \n>       assert time_difference <= tolerance, (f\"Expected '{time_stamp}', but got '{response_time_stamp}', \"\n                                              f\"the difference '{time_difference}' is more than the \"\n                                              f\"tolerance '{tolerance}'\")\nE       AssertionError: Expected '2024-12-01 17:07:12.023384', but got '2024-12-01 17:05:34.929000', the difference '0:01:37.094384' is more than the tolerance '0:01:00'\nE       assert datetime.timedelta(seconds=97, microseconds=94384) <= datetime.timedelta(seconds=60)\n\ntests\\unit\\audit_logs\\test_audit_logs.py:148: AssertionError","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"login","time":{"start":1733072831466,"stop":1733072831783,"duration":317},"status":"passed","steps":[],"attachments":[],"parameters":[],"attachmentStep":false,"stepsCount":0,"hasContent":false,"attachmentsCount":0,"shouldDisplayMessage":false},{"name":"get_facility","time":{"start":1733072831783,"stop":1733072831933,"duration":150},"status":"passed","steps":[],"attachments":[],"parameters":[],"attachmentStep":false,"stepsCount":0,"hasContent":false,"attachmentsCount":0,"shouldDisplayMessage":false}],"afterStages":[],"labels":[{"name":"tag","value":"validate_update_auto_selection_policy_audit_logs_details"},{"name":"tag","value":"run(order=-2)"},{"name":"tag","value":"second_to_last"},{"name":"tag","value":"audit_logs_scenarios"},{"name":"tag","value":"scenario"},{"name":"parentSuite","value":"tests.scenarios.audit_logs"},{"name":"suite","value":"test_audit_logs_scenarios"},{"name":"subSuite","value":"TestAuditLogsScenarios"},{"name":"host","value":"DESKTOP-ESU2KLG"},{"name":"thread","value":"28192-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.scenarios.audit_logs.test_audit_logs_scenarios"},{"name":"resultFormat","value":"allure2"}],"parameters":[],"links":[{"name":"https://app.clickup.com/t/86cw0frup","url":"https://app.clickup.com/t/86cw0frup","type":"link"}],"hidden":true,"retry":true,"extra":{"categories":[],"tags":["validate_update_auto_selection_policy_audit_logs_details","scenario","audit_logs_scenarios","second_to_last","run(order=-2)"]},"source":"151e9bb0f2b897e7.json","parameterValues":[]}